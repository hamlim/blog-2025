/// <reference types="bun" />
import topPostPaths from "#/top-posts.json";
import { collectMetadata, getMDXFiles } from "./collect-metadata";

import type { HydratedFrontmatter } from "#/types";

let metadataPath = "./src/metadata.gen.ts";

export async function generateMetadata() {
  // metadata.gen.ts:
  let contents = `/* Autogenerated file */
/* do not edit */

import type { HydratedFrontmatter } from "#/types";
`;

  let mdxFiles = await getMDXFiles();

  let metadata = await collectMetadata(mdxFiles);

  contents += `
export let metadata: Array<HydratedFrontmatter> = ${JSON.stringify(
    metadata,
    null,
    2,
  )};`;

  await Bun.write(metadataPath, contents);

  // collections/top-posts.gen.ts

  let topPosts = topPostPaths
    .map((path) =>
      metadata.find(
        (post) =>
          post.type === "blog-post" &&
          post.path === path &&
          post.status === "public",
      ),
    )
    .filter((post): post is HydratedFrontmatter => post !== undefined);

  await Bun.write(
    "./src/collections/top-posts.gen.ts",
    `/* Autogenerated file */
/* do not edit */
import type { HydratedFrontmatter } from "#/types";

export let topPosts: Array<HydratedFrontmatter> = ${JSON.stringify(
      topPosts,
      null,
      2,
    )}`,
  );

  // collections/recent-posts.gen.ts

  let recentPosts = metadata
    .filter((post) => post.type === "blog-post" && post.status === "public")
    .sort((a, b) => {
      return new Date(b.date).getTime() - new Date(a.date).getTime();
    })
    .slice(0, 5);

  await Bun.write(
    "./src/collections/recent-posts.gen.ts",
    `/* Autogenerated file */
/* do not edit */
import type { HydratedFrontmatter } from "#/types";

export let recentPosts: Array<HydratedFrontmatter> = ${JSON.stringify(
      recentPosts,
      null,
      2,
    )}`,
  );

  // collections/recent-snippets.gen.ts

  let recentSnippets = metadata
    .filter(
      (snippet) => snippet.type === "snippet" && snippet.status === "public",
    )
    .sort((a, b) => {
      return new Date(b.date).getTime() - new Date(a.date).getTime();
    })
    .slice(0, 5);

  await Bun.write(
    "./src/collections/recent-snippets.gen.ts",
    `/* Autogenerated file */
/* do not edit */
import type { HydratedFrontmatter } from "#/types";

export let recentSnippets: Array<HydratedFrontmatter> = ${JSON.stringify(
      recentSnippets,
      null,
      2,
    )}`,
  );

  // collections/recent-status-updates.gen.ts

  let recentStatusUpdates = metadata
    .filter(
      (update) => update.type === "status-update" && update.status === "public",
    )
    .sort((a, b) => {
      return new Date(b.date).getTime() - new Date(a.date).getTime();
    })
    .slice(0, 5);

  await Bun.write(
    "./src/collections/recent-status-updates.gen.ts",
    `/* Autogenerated file */
/* do not edit */
import type { HydratedFrontmatter } from "#/types";

export let recentStatusUpdates: Array<HydratedFrontmatter> = ${JSON.stringify(
      recentStatusUpdates,
      null,
      2,
    )}`,
  );
}
