/// <reference types="bun" />
import matter from "gray-matter";
import { glob } from "tinyglobby";

type RawFrontmatter = {
  title: string;
  slug: string;
  tags: Array<string>;
  description: string;
  date: number;
};

export let mdxRootDir = "./src/mdx";

export async function getMDXFiles(): Promise<Array<string>> {
  return await glob(`${mdxRootDir}/**/*.mdx`);
}

export async function collectMetadata(files: Array<string>) {
  let metadata: Record<string, RawFrontmatter> = {};

  await Promise.all(
    files.map(async (file) => {
      let content = await Bun.file(file).text();
      let { data } = matter(content);
      metadata[
        file.replace(mdxRootDir.replace("./", ""), "").replace(".mdx", "")
      ] = data as RawFrontmatter;
    }),
  );

  return metadata;
}

let metadataPath = "./src/metadata.gen.ts";
export async function generateMetadata() {
  let contents = `/* Autogenerated file */
/* do not edit */`;

  let mdxFiles = await getMDXFiles();

  let metadata: Record<string, RawFrontmatter> =
    await collectMetadata(mdxFiles);

  contents += `
export let metadata = ${JSON.stringify(metadata, null, 2)};`;

  await Bun.write(metadataPath, contents);
  await Bun.$`bun run format`;
}

if (import.meta.main) {
  await generateMetadata();
}
